import { INestApplication } from '@nestjs/common';
import { getRepositoryToken } from '@nestjs/typeorm';
import { factory, useSeeding } from 'typeorm-seeding';
import * as request from 'supertest';
import { random } from 'faker';

import { repositoryMockFactory } from '../utils/repositoryMock';

import { {{pascalCase name}}ResponseDto } from '../../src/{{moduleFolder name}}/dto/{{pascalCase name}}ResponseDto';

import { {{pascalCase name}}Entity } from '../../src/{{kebabCase name}}/entities/{{pascalCase name}}Entity';

import { createAppTestingModule } from '../utils/createAppTestingModule';
import { createNestTestingApplication } from '../utils/createNestTestingApplication';

describe('{{pascalCase name}} (e2e)', () => {
  let app: INestApplication;
  const {{camelCase name}}RepositoryMock = repositoryMockFactory();

  beforeAll(async () => {
    const module = await createAppTestingModule()
      .overrideProvider(getRepositoryToken({{pascalCase name}}Entity))
      .useValue({{camelCase name}}RepositoryMock)
      .compile();

    await useSeeding();

    app = await createNestTestingApplication(module);
  });

  afterAll(async () => {
    await app.close();
  });

  it('GET /{{route name}}', async () => {
    const {{plural (camelCase name)}} = await factory({{pascalCase name}}Entity)().makeMany(2);

    {{plural (camelCase name)}}.forEach((item) => item.id = random.number());

    {{camelCase name}}RepositoryMock.findAndCount.mockReturnValue([
      {{plural (camelCase name)}},
      {{plural (camelCase name)}}.length,
    ]);

    const items: {{pascalCase name}}ResponseDto[] = {{plural (camelCase name)}}.map(item => ({
      id: item.id,
      name: item.name,
    }));

    return request(app.getHttpServer())
      .get('/{{route name}}')
      .expect(200)
      .expect({
        items,
        meta: {
          count: items.length,
        },
      });
  });
});
