import { FindConditions } from 'typeorm';

import { ApiPropertyQueryFilter } from '../../common/decorators/ApiPropertyQueryFilter';
import { ApiPropertyQueryRelations } from '../../common/decorators/ApiPropertyQueryRelations';
import { ApiPropertyQuerySearch } from '../../common/decorators/ApiPropertyQuerySearch';
import { ApiPropertyQuerySort } from '../../common/decorators/ApiPropertyQuerySort';

import { DEFAULT_{{constantCase name}}_RELATIONS } from '../{{camelCase name}}.const';

import { QueryField } from '../../common/query/types/QueryField';

import { IQuerySort } from '../../common/query/interfaces/IQuerySort';
import { IQueryTransformedSearch } from '../../common/query/interfaces/IQueryTransformedSearch';

import { GetManyQueryDto } from '../../common/dto/GetManyQueryDto';

import { {{Entity name}} } from '../entities/{{Entity name}}';

export class GetMany{{plural (pascalCase name)}}QueryDto extends GetManyQueryDto<{{Entity name}}> {
  @ApiPropertyQueryFilter({
    entity: {{Entity name}},
  })
  [QueryField.where]: FindConditions<{{Entity name}}>;

  @ApiPropertyQuerySearch({
    fields: ['name'],
  })
  [QueryField.search]: IQueryTransformedSearch<{{Entity name}}>;

  @ApiPropertyQueryRelations({
    fields: DEFAULT_{{constantCase name}}_RELATIONS,
  })
  [QueryField.relations]: string[];

  @ApiPropertyQuerySort({
    entity: {{Entity name}},
  })
  [QueryField.sort]: IQuerySort<{{Entity name}}>[];
}
